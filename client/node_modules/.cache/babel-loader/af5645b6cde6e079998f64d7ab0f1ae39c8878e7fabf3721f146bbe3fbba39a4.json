{"ast":null,"code":"var _ScrollService;\nimport { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  constructor() {\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelVisible;\n        default:\n          return false;\n      }\n    };\n    this.checkCurrentScreenUnderViewPort = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\n  }\n}\n_ScrollService = ScrollService;\nScrollService.scrollService = new _ScrollService();\nScrollService.currentScreenBroadcaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelVisible","checkCurrentScreenUnderViewPort","event","Object","keys","length","screen","screenFromDom","document","getElementById","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","_ScrollService","scrollService"],"sources":["C:/Users/chand/OneDrive/Desktop/protfolio/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\n\nexport default class ScrollService {\n  static scrollService = new ScrollService();\n  static currentScreenBroadcaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  constructor() {\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\n  }\n\n  isElementInView = (elem, type) => {\n    let rec = elem.getBoundingClientRect();\n    let elementTop = rec.top;\n    let elementBottom = rec.Bottom;\n\n    let partiallyVisible =\n      elementTop < window.innerHeight && elementBottom >= 0;\n    let completelVisible =\n      elementTop >= 0 && elementBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyVisible;\n\n      case \"complete\":\n        return completelVisible;\n\n      default:\n        return false;\n    }\n  };\n  checkCurrentScreenUnderViewPort = (event) => {\n    if (!event || Object.keys(event).length < 1) return;\n    for (let screen of TOTAL_SCREENS) {\n      let screenFromDom = document.getElementById(screen.screen_name);\n      if (!screenFromDom) continue;\n\n      let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n      let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n      if (fullyVisible || partiallyVisible) {\n        if (partiallyVisible && !screen.alreadyRendered) {\n          ScrollService.currentScreenFadeIn.next({\n            fadeInScreen: screen.screen_name,\n          });\n          screen[\"alreadyRendered\"] = true;\n          break;\n        }\n        if (fullyVisible) {\n          ScrollService.currentScreenBroadcaster.next({\n            screenInView: screen.screen_name,\n          });\n          break;\n        }\n      }\n    }\n  };\n}\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAKjCC,WAAWA,CAAA,EAAG;IAAA,KAIdC,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,CAAC,CAAC;MACtC,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAM;MAE9B,IAAIC,gBAAgB,GAClBJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,aAAa,IAAI,CAAC;MACvD,IAAIK,gBAAgB,GAClBP,UAAU,IAAI,CAAC,IAAIE,aAAa,IAAIG,MAAM,CAACC,WAAW;MAExD,QAAQT,IAAI;QACV,KAAK,SAAS;UACZ,OAAOO,gBAAgB;QAEzB,KAAK,UAAU;UACb,OAAOG,gBAAgB;QAEzB;UACE,OAAO,KAAK;MAChB;IACF,CAAC;IAAA,KACDC,+BAA+B,GAAIC,KAAK,IAAK;MAC3C,IAAI,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;MAC7C,KAAK,IAAIC,MAAM,IAAItB,aAAa,EAAE;QAChC,IAAIuB,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAACH,MAAM,CAACI,WAAW,CAAC;QAC/D,IAAI,CAACH,aAAa,EAAE;QAEpB,IAAII,YAAY,GAAG,IAAI,CAACvB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QACrE,IAAII,YAAY,IAAId,gBAAgB,EAAE;UACpC,IAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACM,eAAe,EAAE;YAC/C1B,aAAa,CAAC2B,mBAAmB,CAACC,IAAI,CAAC;cACrCC,YAAY,EAAET,MAAM,CAACI;YACvB,CAAC,CAAC;YACFJ,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACF;UACA,IAAIK,YAAY,EAAE;YAChBzB,aAAa,CAAC8B,wBAAwB,CAACF,IAAI,CAAC;cAC1CG,YAAY,EAAEX,MAAM,CAACI;YACvB,CAAC,CAAC;YACF;UACF;QACF;MACF;IACF,CAAC;IAhDCZ,MAAM,CAACoB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACjB,+BAA+B,CAAC;EACzE;AAgDF;AAACkB,cAAA,GAvDoBjC,aAAa;AAAbA,aAAa,CACzBkC,aAAa,GAAG,IAAIlC,cAAa,CAAC,CAAC;AADvBA,aAAa,CAEzB8B,wBAAwB,GAAG,IAAI/B,OAAO,CAAC,CAAC;AAF5BC,aAAa,CAGzB2B,mBAAmB,GAAG,IAAI5B,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}